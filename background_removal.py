# -*- coding: utf-8 -*-
"""Copy of Copy of Background removal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a1d7NnEABKXgdEMI_ZuStqe4pWEtuKE_

###**Background removal from diamond images using Trimap Image Matting**

## 1. Preparation
#### Getting the Modnet Architecture for Image Matting
"""

# Commented out IPython magic to ensure Python compatibility.
import os

# clone the repository
# %cd /content
if not os.path.exists('MODNet'):
  !git clone https://github.com/ZHKKKe/MODNet
# %cd MODNet/

# dowload the pre-trained ckpt for image matting
pretrained_ckpt = 'pretrained/modnet_photographic_portrait_matting.ckpt'
if not os.path.exists(pretrained_ckpt):
  !gdown --id 1mcr7ALciuAsHCpLnrtG_eop5-EYhbCmz \
          -O pretrained/modnet_photographic_portrait_matting.ckpt

"""# 2. Create Folders
### create differnt folders for storing the input, foreground and alpha mattes
"""

import shutil
import os
from google.colab import files

# clean and rebuild the image folders
input_folder = 'demo/image_matting/colab/input/'
if os.path.exists(input_folder):
  shutil.rmtree(input_folder)
os.makedirs(input_folder)

output_folder = 'demo/image_matting/colab/output'
if os.path.exists(output_folder):
  shutil.rmtree(output_folder)
os.makedirs(output_folder)

foreground_folder = 'demo/image_matting/colab/foreground'
if os.path.exists(foreground_folder):
  shutil.rmtree(foreground_folder)
os.makedirs(foreground_folder)

"""# 3. Upload Images

<p align="justify">Upload portrait images to be processed (only PNG and JPG format are supported):</p>

Upload Zip files
"""

import zipfile
with zipfile.ZipFile("/content/AS.zip","r") as zip_ref:
    zip_ref.extractall("/content/MODNet/demo/image_matting/colab/input")

"""Upload Rar files"""

pip install patool

import patoolib
patoolib.extract_archive("/content/Shape_1d_256i.rar", outdir=input_folder)

"""Upload image directly """

# upload images (PNG or JPG)
image_names = list(files.upload().keys())
for image_name in image_names:
  shutil.move(image_name, os.path.join(input_folder, image_name))

"""## 4. Execution

set the desired path for execution
"""

input_folder = '/content/MODNet/demo/image_matting/colab/input/Shape_1d_256i/BR'

"""<p align="justify">Run the following command for alpha matte prediction:</p>"""

!python -m demo.image_matting.colab.inference \
        --input-path {input_folder} \
        --output-path demo/image_matting/colab/output \
        --ckpt-path ./pretrained/modnet_photographic_portrait_matting.ckpt

"""## 5. Visualization

<p align="justify">Display the results (from left to right: image, foreground, and alpha matte):</p>
"""

import numpy as np
from PIL import Image
 
def combined_display(image, matte):
  # calculate display resolution
  w, h = image.width, image.height
  rw, rh = 800, int(h * 800 / (3 * w))
  
  # obtain predicted foreground
  image = np.asarray(image)
  if len(image.shape) == 2:
    image = image[:, :, None]
  if image.shape[2] == 1:
    image = np.repeat(image, 3, axis=2)
  elif image.shape[2] == 4:
    image = image[:, :, 0:3]
  matte = np.repeat(np.asarray(matte)[:, :, None], 3, axis=2) / 255
  foreground = image * matte + np.full(image.shape, 255) * (1 - matte)
  # combine image, foreground, and alpha into one line
  combined = np.concatenate((image, foreground, matte * 255 ), axis=1)
  combined = Image.fromarray(np.uint8(combined)).resize((rw, rh))
  foreground = Image.fromarray(np.uint8(foreground)).resize((rw, rh))
  print("foreground",image_name,foreground)
  

  image_path = foreground_folder

  foreground.save(f"{image_path}/{image_name}")

  return combined

# visualize all images
image_names = os.listdir(input_folder)
for image_name in image_names:
  matte_name = image_name.split('.')[0] + '.png'
  image = Image.open(os.path.join(input_folder, image_name))
  matte = Image.open(os.path.join(output_folder, matte_name))
  display(combined_display(image, matte))
  print(image_name, '\n')

"""### 6. Download Results

<p align="justify">Download the Zip package of predicted foreground:</p>
"""

output_folder = foreground_folder
zip_filename = 'AS.zip'
if os.path.exists(zip_filename):
  os.remove(zip_filename)

os.system(f"zip -r -j {zip_filename} {output_folder}/*")
files.download(zip_filename)

output_folder = output_folder
zip_filename = 'AS.zip'
if os.path.exists(zip_filename):
  os.remove(zip_filename)

os.system(f"zip -r -j {zip_filename} {output_folder}/*")
files.download(zip_filename)